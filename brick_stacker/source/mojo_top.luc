module mojo_top (
  input clk,              // 50MHz clock
  input rst_n,            // reset button (active low)
  output led [8],         // 8 user controllable LEDs
  input cclk,             // configuration clock, AVR ready when high
  output spi_miso,        // AVR SPI MISO
  input spi_ss,           // AVR SPI Slave Select
  input spi_mosi,         // AVR SPI MOSI
  input spi_sck,          // AVR SPI Clock
  output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
  input avr_tx,           // AVR TX (FPGA RX)
  output avr_rx,          // AVR RX (FPGA TX)
  input avr_rx_busy,      // AVR RX buffer full
  output io_seg [8],      // 7-segment LEDs on IO Shield
  output io_sel [4],      // Digit select on IO Shield
  output a[16],
  output c[16],
  input button,
  input io_dip[2]
  ) {

    alu16 alu;
    sig rst;              // reset signal
    sig led_pattern[16][16];  //sig to store led patterns for all 16 rows
    sig tmp_brick_pos[16];
    var i;

    .clk(clk) {
      // The reset conditioner is used to synchronize the reset signal to the FPGA
      // clock. This ensures the entire FPGA comes out of reset at the same time.
      reset_conditioner reset_cond;
      button_conditioner butt;
      edge_detector butt_edge(#RISE(0),#FALL(1));

      .rst(rst){
        led_matrix ledM;
        counter clocky(#SIZE(1),#DIV(10));  //must be the same as led_Matrix DIV
        dff brick_pos[16](#INIT(h0007));    //tracks position of brick
        dff direction[1](#INIT(0));         //sets direction to shift
        dff brick_level[4](#INIT(0));       //tells you which level is the brick moving on
        dff previous_state[4](#INIT(0));     //remembers the previous_state for button irq
        dff previous_brick_pos[16](#INIT(0));     //remembers the previous_state for button irq

        dff level_one[16](#INIT(h0007));    //stores level one brick pos
        dff level_two[16](#INIT(h0000));    //stores level two brick pos
        dff level_three[16](#INIT(h0000));  //stores level three brick pos
        dff level_four[16](#INIT(h0000));   //stores level four brick pos
        dff level_five[16](#INIT(h0000));   //stores level five brick pos
        dff score[12](#INIT(h000));         //store score for entire game
        dff clock_select[2](#INIT(h0));
        dff clock_speed[1](#INIT(h0));
        fsm bricky (#INIT(SCREEN_REFRESH)) = {SCREEN_REFRESH, SHIFT_BRICK, DRAW_BRICK, CHECK_LEVEL, NEXT_LEVEL, END, LEVEL_TWO, CHECK_SCORE, UPDATE_PATTERN, TEST_ALU};

        multi_seven_seg seg;
        modulus mod;
        modulus mod1;
      }
    }

    .clk(clocky.value) {
      .rst(rst){
        counter posClock10(#SIZE(1),#DIV(10));  //dividing the led scan clock by 2^3, bigger the slower
        counter posClock9(#SIZE(1),#DIV(9));  //dividing the led scan clock by 2^3, bigger the slower
        counter posClock8(#SIZE(1),#DIV(8));  //dividing the led scan clock by 2^3, bigger the slower
      }
    }

    sig third_dig[4];
    sig second_dig[4];
    sig first_dig[4];


    always {
      reset_cond.in = ~rst_n; // input raw inverted reset signal
      rst = reset_cond.out;   // conditioned reset

      spi_miso = bz;          // not using SPI
      spi_channel = bzzzz;    // not using flags
      avr_rx = bz;            // not using serial port


      led = h00;
      led[0] = io_dip[0];
      led[1] = io_dip[1];

      third_dig = score.q/100;  //get third digit
      mod.num = score.q;
      mod.divider = 100;
      second_dig = mod.out/10;  //gets 2nd digit
      mod1.num = mod.out;
      mod1.divider = 10;
      first_dig = mod1.out;
      //seg.values = {4h0,score.q[11:8],score.q[7:4],score.q[3:0]};
      seg.values = {4h0,third_dig,second_dig,first_dig};

      io_seg = ~seg.seg; // connect segments to the driver
      io_sel = ~seg.sel; // connect digit select to the driver

      butt.in = button;
      butt_edge.in = butt.out;

	    alu.a = h00;
	    alu.b = h00;
	    alu.alufn = h00;

      a = ledM.a;             //set anode pins to output from ledM module
      c = ledM.c;             //set cathode pins to output from ledM module

      for (i = 0; i < led_pattern.WIDTH[0]; i++) {
        led_pattern[i] = h0000;
      }

      case(clock_select.q) {
        0:
          clock_speed.d = posClock10.value;
        1:
          clock_speed.d = posClock9.value;
        2:
          clock_speed.d = posClock8.value;
        }


      case(bricky.q) {
        bricky.TEST_ALU:
          alu.a = hE000;
          alu.b = hE000;
          alu.alufn = h33; //CMPEQ
          led = alu.out;

          bricky.d = bricky.TEST_ALU;

        bricky.SCREEN_REFRESH:
          alu.a = clock_speed.q ;
          alu.b = 1;
          alu.alufn = h33; //CMPEQ
          if(alu.out == 1) {
            brick_pos.d = brick_pos.q;
            bricky.d = bricky.SHIFT_BRICK;
          }
          else {
            brick_pos.d = brick_pos.q;
            bricky.d = bricky.SCREEN_REFRESH;
          }

          if(butt_edge.out) {
            bricky.d = bricky.CHECK_SCORE;
          }

          case(clock_select.q) {
            0:
              clock_speed.d = posClock10.value;
            1:
              clock_speed.d = posClock9.value;
            2:
              clock_speed.d = posClock8.value;
            }

          direction.d = direction.q;
          brick_level.d = brick_level.q;
          previous_state.d = bricky.q;

        bricky.SHIFT_BRICK:
          case(direction.q) {
            0:
              //replace with alu
              alu.a = brick_pos.q;
              alu.b = hE000;
              alu.alufn = h33; //CMPEQ
              if(brick_pos.q == hE000) {
                brick_pos.d = brick_pos.q;
                direction.d = 1;
              }
              else {
                alu.a = brick_pos.q;
                alu.b = 1;
                alu.alufn = h20; //SHL
                brick_pos.d = alu.out;
                case(brick_level.q) {
                  0:
                    level_one.d = alu.out;
                  3:
                    level_two.d = alu.out;
                  6:
                    level_three.d = alu.out;
                    if(clock_select.q != 2)
                      clock_select.d = 1;
                  9:
                    level_four.d = alu.out;
                  12:
                    level_five.d = alu.out;
                    clock_select.d = 2;
                }
                direction.d = direction.q;
              }
          1:
            alu.a = brick_pos.q;
            alu.b = h0007;
            alu.alufn = h33; //CMPEQ
            if(brick_pos.q == h0007) {
              brick_pos.d = brick_pos.q;
              direction.d = 0;
            }
            else {
              alu.a = brick_pos.q;
              alu.b = 1;
              alu.alufn = h21; //SHR
              brick_pos.d = alu.out;
              case(brick_level.q) {
                0:
                  level_one.d = alu.out;
                3:
                  level_two.d = alu.out;
                6:
                  level_three.d = alu.out;
                9:
                  level_four.d = alu.out;
                12:
                  level_five.d = alu.out;
              }
              direction.d = direction.q;
            }
          }

          if(butt_edge.out) {
            bricky.d = bricky.CHECK_SCORE;
          }
          bricky.d = bricky.DRAW_BRICK;
          brick_level.d = brick_level.q;
          previous_state.d = bricky.q;

        bricky.DRAW_BRICK:
          alu.a = clock_speed.q;
          alu.b = 1;
          alu.alufn = h33; //CMPEQ
          if(alu.out == 1) {
            bricky.d = bricky.DRAW_BRICK;
          }
          else {
            bricky.d = bricky.SCREEN_REFRESH;
          }

          if(butt_edge.out) {
            bricky.d = bricky.CHECK_SCORE;
          }
          direction.d = direction.q;
          brick_level.d = brick_level.q;
          previous_state.d = bricky.q;

        bricky.CHECK_SCORE:
          tmp_brick_pos = tmp_brick_pos;
          alu.a = previous_brick_pos.q;
          alu.b = 0;
          alu.alufn = h18; //AND

          case(brick_level.q) {
            0:
              previous_brick_pos.d = level_one.q;
            3:
              alu.b = level_two.q;
              previous_brick_pos.d = alu.out;
            6:
              alu.b = level_three.q;
              previous_brick_pos.d = alu.out;
            9:
              alu.b = level_four.q;
              previous_brick_pos.d = alu.out;
            12:
              alu.b = level_five.q;
              previous_brick_pos.d = alu.out;
          }

          if(io_dip[0]) previous_brick_pos.d = h0380;
          if(io_dip[1] && brick_level.q == 3) {
            alu.b = h0180;
            previous_brick_pos.d = alu.out;
          }
          if(io_dip[1] && brick_level.q == 6) {
            alu.b = h0080;
            previous_brick_pos.d = alu.out;
          }
          if(io_dip[1] && brick_level.q == 9) {
            alu.b = hE000;
            previous_brick_pos.d = alu.out;
          }
          
          bricky.d = bricky.UPDATE_PATTERN;

       bricky.UPDATE_PATTERN:
        alu.a = previous_brick_pos.q;
        alu.b = 0;
        alu.alufn = h33; //CMPEQ

        case(brick_level.q) {
          0:
            level_one.d = previous_brick_pos.q;
          3:
            if(alu.out == 0) level_two.d = previous_brick_pos.q;
          6:
            if(alu.out == 0) level_three.d = previous_brick_pos.q;
          9:
            if(alu.out == 0) level_four.d = previous_brick_pos.q;
          12:
            if(alu.out == 0) level_five.d = previous_brick_pos.q;
          }

         if(alu.out == 0) {
            bricky.d = bricky.CHECK_LEVEL;
         }
         else {
            bricky.d = bricky.END;
         }

        bricky.CHECK_LEVEL:
          //replace with alu
          alu.a = brick_level.q ;
          alu.b = 12;
          alu.alufn = h33; //CMPEQ
          if(brick_level.q == 12) {
            bricky.d = bricky.LEVEL_TWO;
            previous_state.d = bricky.q;
          }
          else {
            bricky.d = bricky.NEXT_LEVEL;
          }

        bricky.NEXT_LEVEL:
          alu.a = brick_level.q;
          alu.b = 3;
          alu.alufn = h00;  //ADD
          brick_level.d = alu.out;
          bricky.d = previous_state.q;
          score.d = score.q + 25;

          bricky.d = previous_state.q;
          direction.d = direction.q;
          previous_state.d = bricky.q;

        bricky.END:
          bricky.d = bricky.END;


        bricky.LEVEL_TWO:
          brick_level.d = 3;
          level_one.d = level_five.q;
          level_two.d = h0000;
          level_three.d = h0000;
          level_four.d = h0000;
          level_five.d = h0000;

          bricky.d = bricky.SCREEN_REFRESH;
      }

      led_pattern[brick_level.q] = brick_pos.q;
      led_pattern[brick_level.q+1] = brick_pos.q;
      led_pattern[brick_level.q+2] = brick_pos.q;
      led_pattern[0] = level_one.q;
      led_pattern[1] = level_one.q;
      led_pattern[2] = level_one.q;
      led_pattern[3] = level_two.q;
      led_pattern[4] = level_two.q;
      led_pattern[5] = level_two.q;
      led_pattern[6] = level_three.q;
      led_pattern[7] = level_three.q;
      led_pattern[8] = level_three.q;
      led_pattern[9] = level_four.q;
      led_pattern[10] = level_four.q;
      led_pattern[11] = level_four.q;
      led_pattern[12] = level_five.q;
      led_pattern[13] = level_five.q;
      led_pattern[14] = level_five.q;

      ledM.pattern[15:0] = led_pattern[15:0];


     }
  }
