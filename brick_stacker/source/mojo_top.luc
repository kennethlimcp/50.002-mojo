module mojo_top (
  input clk,              // 50MHz clock
  input rst_n,            // reset button (active low)
  output led [8],         // 8 user controllable LEDs
  input cclk,             // configuration clock, AVR ready when high
  output spi_miso,        // AVR SPI MISO
  input spi_ss,           // AVR SPI Slave Select
  input spi_mosi,         // AVR SPI MOSI
  input spi_sck,          // AVR SPI Clock
  output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
  input avr_tx,           // AVR TX (FPGA RX)
  output avr_rx,          // AVR RX (FPGA TX)
  input avr_rx_busy,      // AVR RX buffer full
  input io_button[5],
  output a[16],
  output c[16]
  ) {

    sig rst;              // reset signal
    sig led_pattern[16][16];  //sig to store led patterns for all 16 rows
    var i;
    
    .clk(clk) {
      // The reset conditioner is used to synchronize the reset signal to the FPGA
      // clock. This ensures the entire FPGA comes out of reset at the same time.
      reset_conditioner reset_cond;
      .rst(rst){
        led_test ledMtest;
        led_matrix ledM;
      }
    }

     always {
      // led_pattern[0] = h0380;
      // led_pattern[1] = h0380;
      // led_pattern[2] = h0380;
      // led_pattern[3] = h0000;
      // led_pattern[4] = h0000;
      // led_pattern[5] = h0000;
      // led_pattern[6] = h0000;
      // led_pattern[7] = h0000;
      // led_pattern[8] = h0000;
      // led_pattern[9] = h0000;
      // led_pattern[10] = h0000;
      // led_pattern[11] = h0000;
      // led_pattern[12] = h0000;
      // led_pattern[13] = h0000;
      // led_pattern[14] = h0000;
      // led_pattern[15] = h0000;

      //initializing the led pattern to draw a 3x3 cube at the bottom
      for (i = 0; i < led_pattern.WIDTH[0]; i++) {

        if(i == 0 || i == 1 || i == 2)
          led_pattern[i] = h0380;
        else
          led_pattern[i] = h0000;
      }
       ledM.pattern = led_pattern;
     }

    always {
      reset_cond.in = ~rst_n; // input raw inverted reset signal
      rst = reset_cond.out;   // conditioned reset

      led = h00;              // turn LEDs off
      spi_miso = bz;          // not using SPI
      spi_channel = bzzzz;    // not using flags
      avr_rx = bz;            // not using serial port

      a = ledM.a;             //set anode pins to output from ledM module
      c = ledM.c;             //set cathode pins to output from ledM module
     }
  }
